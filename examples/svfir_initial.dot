digraph "SVFIR" {
	label="SVFIR";

	Node0x55f54ffacb00 [shape=record,shape=box,label="{ConstantNullPtrValVar ID: 0\n ptr null \{ constant data \}}"];
	Node0x55f54ffacb00 -> Node0x55f54ff9c250[color=black];
	Node0x55f54ffacb00 -> Node0x55f54ffc35e0[color=grey];
	Node0x55f54ff9c250 [shape=record,shape=diamond,label="{DummyValVar ID: 1}"];
	Node0x55f54ffac930 [shape=record,shape=box3d,label="{DummyObjVar ID: 3}"];
	Node0x55f550016c90 [shape=record,shape=box,label="{GlobalValVar ID: 4\n @a = dso_local global i32 0, align 4, !dbg !0 \{ Glob \"ln\": 3, \"fl\": \"test.c\" \}}"];
	Node0x55f550016c90 -> Node0x55f5500227d0[color=blue];
	Node0x55f54ff953d0 [shape=record,shape=box3d,label="{GlobalObjNode ID: 6\n @a = dso_local global i32 0, align 4, !dbg !0 \{ Glob \"ln\": 3, \"fl\": \"test.c\" \}}"];
	Node0x55f54ff953d0 -> Node0x55f550016c90[color=green];
	Node0x55f550016390 [shape=record,shape=box,label="{GlobalValVar ID: 7\n @b = dso_local global i32 0, align 4, !dbg !5 \{ Glob \"ln\": 4, \"fl\": \"test.c\" \}}"];
	Node0x55f550016390 -> Node0x55f5500227d0[color=blue];
	Node0x55f54ffc5740 [shape=record,shape=box3d,label="{GlobalObjNode ID: 8\n @b = dso_local global i32 0, align 4, !dbg !5 \{ Glob \"ln\": 4, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffc5740 -> Node0x55f550016390[color=green];
	Node0x55f550015f90 [shape=record,shape=box,label="{GlobalValVar ID: 9\n @c = dso_local global i32 0, align 4, !dbg !8 \{ Glob \"ln\": 5, \"fl\": \"test.c\" \}}"];
	Node0x55f550015f90 -> Node0x55f5500227d0[color=blue];
	Node0x55f54ffacea0 [shape=record,shape=box3d,label="{GlobalObjNode ID: 10\n @c = dso_local global i32 0, align 4, !dbg !8 \{ Glob \"ln\": 5, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffacea0 -> Node0x55f550015f90[color=green];
	Node0x55f54ffa3c50 [shape=record,shape=box,label="{FunValVar ID: 11\nfoo}"];
	Node0x55f54ffc4d70 [shape=record,shape=box3d,label="{FunObjVar ID: 12 (base object)\nfoo}"];
	Node0x55f54ffc4d70 -> Node0x55f54ffa3c50[color=green];
	Node0x55f54ffc3d20 [shape=record,shape=box,label="{[foo] ArgValVar ID: 14\n ptr %p \{ 0th arg foo \"ln\": 7, \"file\": \"test.c\" \}}"];
	Node0x55f54ffc3d20 -> Node0x55f54ffdfd90[color=blue];
	Node0x55f54ffdfd90 [shape=record,shape=box,label="{[foo] ValVar ID: 15\n   %p.addr = alloca ptr, align 8 \{ \"ln\": 7, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffdfd90 -> Node0x55f54ffc5940[color=red];
	Node0x55f550023700 [shape=record,shape=box3d,label="{[foo] StackObjVar ID: 16\n   %p.addr = alloca ptr, align 8 \{ \"ln\": 7, \"fl\": \"test.c\" \}}"];
	Node0x55f550023700 -> Node0x55f54ffdfd90[color=green];
	Node0x55f54ffc5940 [shape=record,shape=box,label="{[foo] ValVar ID: 20\n   %0 = load ptr, ptr %p.addr, align 8, !dbg !25 \{ \"ln\": 8, \"cl\": 6, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffdfb00 [shape=record,shape=box,label="{FunValVar ID: 24\nllvm.dbg.declare}"];
	Node0x55f54ff9fe10 [shape=record,shape=box,label="{FunValVar ID: 30\nmain}"];
	Node0x55f54ffbeef0 [shape=record,shape=box3d,label="{FunObjVar ID: 31 (base object)\nmain}"];
	Node0x55f54ffbeef0 -> Node0x55f54ff9fe10[color=green];
	Node0x55f54ffd8a20 [shape=record,shape=box,label="{[main] RetPN ID: 32 unique return node for function main}"];
	Node0x55f54ffc3ef0 [shape=record,shape=box,label="{[main] ArgValVar ID: 33\n i32 %argc \{ 0th arg main \"ln\": 11, \"file\": \"test.c\" \}}"];
	Node0x55f54ffc3ef0 -> Node0x55f54ffbf2f0[color=blue];
	Node0x55f550015a20 [shape=record,shape=box,label="{[main] ArgValVar ID: 34\n ptr %argv \{ 1st arg main \"ln\": 11, \"file\": \"test.c\" \}}"];
	Node0x55f550015a20 -> Node0x55f550001410[color=blue];
	Node0x55f550023cf0 [shape=record,shape=box,label="{[main] ValVar ID: 35\n   %retval = alloca i32, align 4 }"];
	Node0x55f54ffe5140 [shape=record,shape=box3d,label="{[main] StackObjVar ID: 36\n   %retval = alloca i32, align 4 }"];
	Node0x55f54ffe5140 -> Node0x55f550023cf0[color=green];
	Node0x55f54ffbf2f0 [shape=record,shape=box,label="{[main] ValVar ID: 37\n   %argc.addr = alloca i32, align 4 \{ \"ln\": 11, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffbf2f0 -> Node0x55f54ffc5d00[color=red];
	Node0x55f54ffc1f90 [shape=record,shape=box3d,label="{[main] StackObjVar ID: 38\n   %argc.addr = alloca i32, align 4 \{ \"ln\": 11, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffc1f90 -> Node0x55f54ffbf2f0[color=green];
	Node0x55f550001410 [shape=record,shape=box,label="{[main] ValVar ID: 39\n   %argv.addr = alloca ptr, align 8 \{ \"ln\": 11, \"fl\": \"test.c\" \}}"];
	Node0x55f54fff9fc0 [shape=record,shape=box3d,label="{[main] StackObjVar ID: 40\n   %argv.addr = alloca ptr, align 8 \{ \"ln\": 11, \"fl\": \"test.c\" \}}"];
	Node0x55f54fff9fc0 -> Node0x55f550001410[color=green];
	Node0x55f5500227d0 [shape=record,shape=box,label="{[main] ValVar ID: 41\n   %x = alloca ptr, align 8 \{ \"ln\": 12, \"fl\": \"test.c\" \}}"];
	Node0x55f5500227d0 -> Node0x55f550022430[color=red];
	Node0x55f54ffaa900 [shape=record,shape=box3d,label="{[main] StackObjVar ID: 42\n   %x = alloca ptr, align 8 \{ \"ln\": 12, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffaa900 -> Node0x55f5500227d0[color=green];
	Node0x55f54ffc5d00 [shape=record,shape=box,label="{[main] ValVar ID: 50\n   %0 = load i32, ptr %argc.addr, align 4, !dbg !32 \{ \"ln\": 13, \"cl\": 9, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffc5d00 -> Node0x55f54ffc37b0[color=grey];
	Node0x55f54ffc37b0 [shape=record,shape=box,label="{[main] ValVar ID: 51\n   %cmp = icmp sgt i32 %0, 1, !dbg !34 \{ \"ln\": 13, \"cl\": 14, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffc37b0 -> Node0x55f54ffd80a0[color=grey];
	Node0x55f54ffd80a0 [shape=record,shape=box,label="{[main] ValVar ID: 52\n   br i1 %cmp, label %if.then, label %if.end, !dbg !35 \{ \"ln\": 13, \"cl\": 9, \"fl\": \"test.c\" \}}"];
	Node0x55f54ffc35e0 [shape=record,shape=box,label="{[main] ValVar ID: 54\n   br label %if.end, !dbg !38 \{ \"ln\": 15, \"cl\": 5, \"fl\": \"test.c\" \}}"];
	Node0x55f550022430 [shape=record,shape=box,label="{[main] ValVar ID: 57\n   %1 = load ptr, ptr %x, align 8, !dbg !40 \{ \"ln\": 17, \"cl\": 9, \"fl\": \"test.c\" \}|{<s0>CallICFGNode: \{ \"ln\": 17, \"cl\": 5, \"fl\": \"test.c\" \}}}"];
	Node0x55f550022430:s0 -> Node0x55f54ffc3d20[color=black,style=dashed];
}
